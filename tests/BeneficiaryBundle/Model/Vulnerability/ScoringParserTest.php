<?php

namespace Tests\BeneficiaryBundle\Model\Vulnerability;

use BeneficiaryBundle\Exception\CsvParserException;
use BeneficiaryBundle\Model\Vulnerability\ConditionEnum;
use BeneficiaryBundle\Model\Vulnerability\ScoringParser;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class ScoringParserTest extends KernelTestCase
{
    private const RESOURCE_PATH = __DIR__.'/../../Resources/Vulnerability/';

    /** @var ScoringParser */
    private $scoringParser;

    public function setUp()
    {
        $this->scoringParser = new ScoringParser();
    }

    public function testFileNotExists()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessageRegExp('#File not found (.*)#');

        $this->scoringParser->parse(self::RESOURCE_PATH.'non_existing_path');
    }

    public function testCsvBadStructure()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessage('CSV file has wrong structure');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_bad_format.csv');
    }

    public function testUnknownCondition()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessage('Unknown condition');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_unknown_condition.csv');
    }

    public function testMissingScoreValue()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessage('Missing score value');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_missing_score_value.csv');
    }

    public function testBadFormatScoreValue()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessage('Bad format score value');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_bad_format_score_value.csv');
    }

    public function testMissingConditionValue()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessage('Missing condition value');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_missing_condition_value.csv');
    }

    public function testMissingRow()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessage('Missing score');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_missing_row.csv');
    }

    public function testCorrectParse()
    {
        $scoring = $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_correct.csv');

        $this->assertEquals(4, $scoring->getScore(ConditionEnum::HHH_GENDER_FEMALE));
        $this->assertEquals(3, $scoring->getScore(ConditionEnum::SHELTER_MAKESHIFT));
        $this->assertEquals(0, $scoring->getScore(ConditionEnum::RESIDENCE_OWENERSHIP_OWNED));
        $this->assertEquals(3, $scoring->getScore(ConditionEnum::INCOME_FOOD_0));

        $this->assertEquals(0, $scoring->getConditionValue(ConditionEnum::INCOME_HHM_VERY_HIGH));
        $this->assertEquals(100000, $scoring->getConditionValue(ConditionEnum::DEBT_EXTREME));
    }
}
