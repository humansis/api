<?php

namespace DistributionBundle\Repository;

use DistributionBundle\Entity\GeneralReliefItem;
use DistributionBundle\Entity\DistributionData;
use CommonBundle\Entity\Location;
use BeneficiaryBundle\Entity\Household;

/**
 * DistributionBeneficiaryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DistributionBeneficiaryRepository extends \Doctrine\ORM\EntityRepository
{
    public function countAll(string $iso3)
    {
        $qb = $this->createQueryBuilder("db");
        $q = $qb->select("COUNT(DISTINCT db.beneficiary)")
                ->leftJoin("db.beneficiary", "b")
                ->leftJoin("b.household", "hh");
        $householdRepository = $this->getEntityManager()->getRepository(Household::class);
        $householdRepository->whereHouseholdInCountry($q, $iso3);
        $q->andWhere('hh.archived = 0');        
        return $q->getQuery()->getSingleScalarResult();
    }
    
    public function getByGRI(GeneralReliefItem $gri)
    {
        $qb = $this->createQueryBuilder("db");
        $q = $qb->leftJoin("db.generalReliefs", "gr")
                    ->where("gr.id = :gri")
                    ->setParameter('gri', $gri->getId());
        
        return $q->getQuery()->getOneOrNullResult();
    }

    public function findAssignable(DistributionData $distributionData)
    {
        $qb = $this->createQueryBuilder("db");
        $q = $qb->where("db.distributionData = :dd")
                ->setParameter("dd", $distributionData)
                ->leftJoin("db.booklets", "b")
                ->andWhere('b IS NULL')
                ->orWhere("b.status = :s")
                ->setParameter(':s', 3);
        
        return $q->getQuery()->getResult();
    }

    public function countWithoutBooklet(DistributionData $distributionData)
    {
        $qb = $this->createQueryBuilder("db");
        $q = $qb->select("COUNT(db)")
                ->where("db.distributionData = :dd")
                ->setParameter("dd", $distributionData)
                ->leftJoin("db.booklets", "b")
                ->andWhere('b IS NULL');
        
        return $q->getQuery()->getSingleScalarResult();
    }

    /**
     * @param DistributionData $distributionData
     * @return int
     */
    public function countActive(DistributionData $distributionData)
    {
        $result = $this->count([
            'distributionData' => $distributionData,
            'removed' => false,
        ]);
        return (int) $result;
    }
}
