<?php

namespace DistributionBundle\Repository;

use BeneficiaryBundle\Entity\Beneficiary;
use DistributionBundle\Entity\DistributionBeneficiary;
use DistributionBundle\Entity\GeneralReliefItem;
use DistributionBundle\Entity\Assistance;
use BeneficiaryBundle\Entity\Household;
use VoucherBundle\Entity\Booklet;

/**
 * DistributionBeneficiaryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DistributionBeneficiaryRepository extends \Doctrine\ORM\EntityRepository
{
    public function countAll(string $iso3)
    {
        $qb = $this->createQueryBuilder("db");
        $q = $qb->select("COUNT(DISTINCT db.beneficiary)")
                ->leftJoin("db.beneficiary", "b")
                ->leftJoin("b.projects", "p")
                ->andWhere('p.iso3 = :country')
                ->andWhere('b.archived = 0')
        ;
        $q->setParameter('country', $iso3);

        return $q->getQuery()->getSingleScalarResult();
    }
    
    public function getByGRI(GeneralReliefItem $gri)
    {
        $qb = $this->createQueryBuilder("db");
        $q = $qb->leftJoin("db.generalReliefs", "gr")
                    ->where("gr.id = :gri")
                    ->setParameter('gri', $gri->getId());
        
        return $q->getQuery()->getOneOrNullResult();
    }

    public function findAssignable(Assistance $assistance)
    {
        $qb = $this->createQueryBuilder("db");
        $q = $qb->where("db.assistance = :dd")
                ->setParameter("dd", $assistance)
                ->leftJoin("db.booklets", "b")
                ->andWhere('b IS NULL')
                ->orWhere("b.status = :s")
                ->setParameter(':s', Booklet::UNASSIGNED);
        
        return $q->getQuery()->getResult();
    }

    public function countWithoutBooklet(Assistance $assistance)
    {
        $qb = $this->createQueryBuilder("db");
        $q = $qb->select("COUNT(db)")
                ->where("db.assistance = :dd")
                ->setParameter("dd", $assistance)
                ->leftJoin("db.booklets", "b")
                ->andWhere('b IS NULL');
        
        return $q->getQuery()->getSingleScalarResult();
    }

    /**
     * @param Assistance $assistance
     * @return int
     */
    public function countActive(Assistance $assistance)
    {
        $result = $this->count([
            'assistance' => $assistance,
            'removed' => false,
        ]);
        return (int) $result;
    }

    /**
     * @param Assistance $assistance
     * @param Beneficiary      $beneficiary
     *
     * @return DistributionBeneficiary|null
     */
    public function findByDistributionAndBeneficiary(Assistance $assistance, Beneficiary $beneficiary): ?DistributionBeneficiary
    {
        $qb = $this->createQueryBuilder('db')
            ->andWhere('db.assistance = :assistance')
            ->andWhere('db.beneficiary = :beneficiary')
            ->setParameter('assistance', $assistance)
            ->setParameter('beneficiary', $beneficiary);

        return $qb->getQuery()->getOneOrNullResult();
    }
}
