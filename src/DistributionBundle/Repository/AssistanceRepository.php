<?php

namespace DistributionBundle\Repository;

use BeneficiaryBundle\Entity\Beneficiary;
use BeneficiaryBundle\Entity\Household;
use CommonBundle\Entity\Location;
use DistributionBundle\Entity\DistributedItem;
use Doctrine\ORM\Query\Expr\Join;
use \DateTime;
use DistributionBundle\Entity\Assistance;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use ProjectBundle\Entity\Project;

/**
 * AssistanceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AssistanceRepository extends \Doctrine\ORM\EntityRepository
{
    public function getLastId()
    {
        $qb = $this->createQueryBuilder('dd')
                   ->select("MAX(dd.id)");
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getTotalValue(string $country)
    {
        $qb = $this->createQueryBuilder("dd");

        $qb
            ->select("SUM(c.value)")
            ->leftJoin("dd.project", "p")
            ->where("p.iso3 = :country")
                ->setParameter("country", $country)
            ->leftJoin("dd.commodities", "c")
            ->leftJoin("c.modalityType", "mt")
            ->andWhere("mt.name = 'Mobile'");

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getActiveByCountry(string $country)
    {
        $qb = $this->createQueryBuilder("dd")
                    ->leftJoin("dd.project", "p")
                    ->where("p.iso3 = :country")
                    ->setParameter("country", $country)
                    ->andWhere("dd.archived = 0");
        return $qb->getQuery()->getResult();
    }

    public function getCodeOfUpcomingDistribution(string $countryISO)
    {
        $qb = $this->createQueryBuilder('dd');
        $qb
            ->addSelect('p')
            ->addSelect('l')
            ->addSelect('adm1')
            ->addSelect('adm2')
            ->addSelect('adm3')
            ->addSelect('adm4')
            ->innerJoin('dd.project', 'p')
            ->innerJoin('dd.location', 'l')
            ->leftJoin('l.adm1', 'adm1')
            ->leftJoin('l.adm2', 'adm2')
            ->leftJoin('l.adm3', 'adm3')
            ->leftJoin('l.adm4', 'adm4')
            ->andWhere('p.iso3 = :country')
                ->setParameter('country', $countryISO)
            ->andWhere('dd.dateDistribution > :now')
                ->setParameter('now', new DateTime());

        return $qb->getQuery()->getResult();
    }

    public function countCompleted(string $countryISO3) {
        $qb = $this->createQueryBuilder('dd');
        $qb->select('COUNT(dd)')
            ->leftJoin("dd.location", "l");
        $locationRepository = $this->getEntityManager()->getRepository(Location::class);
        $locationRepository->whereCountry($qb, $countryISO3);
        $qb->andWhere("dd.completed = 1");

        return $qb->getQuery()->getSingleScalarResult();

    }

    public function getNoBenificiaryByResidencyStatus(int $distributionId, string $residencyStatus, int $distributionType) {
        $qb = $this->createQueryBuilder('dd');
        $qb
            ->andWhere('dd.id = :distributionId')
                ->setParameter('distributionId', $distributionId)
            ->leftJoin('dd.distributionBeneficiaries', 'db', Join::WITH, 'db.removed = 0');
        if ($distributionType === Assistance::TYPE_BENEFICIARY) {
            $qb->leftJoin('db.beneficiary', 'b', Join::WITH, 'b.residencyStatus = :residencyStatus');
        } else {
            $qb->leftJoin('db.beneficiary', 'hhh')
                ->leftJoin('hhh.household', 'hh')
                ->leftJoin('hh.beneficiaries', 'b', Join::WITH, 'b.residencyStatus = :residencyStatus');
        }
           $qb->setParameter('residencyStatus', $residencyStatus)
                ->select('COUNT(b)');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getNoHeadHouseholdsByGender(int $distributionId, int $gender) {
        $qb = $this->createQueryBuilder('dd');
        $qb
            ->andWhere('dd.id = :distributionId')
                ->setParameter('distributionId', $distributionId)
            ->leftJoin('dd.distributionBeneficiaries', 'db', Join::WITH, 'db.removed = 0')
            ->leftJoin('db.beneficiary', 'b', Join::WITH, 'b.gender = :gender AND b.status = 1')
                ->setParameter('gender', $gender)
            ->select('COUNT(b)');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getNoFamilies(int $distributionId) {
        $qb = $this->createQueryBuilder('dd');
        $qb
            ->andWhere('dd.id = :distributionId')
                ->setParameter('distributionId', $distributionId)
            ->leftJoin('dd.distributionBeneficiaries', 'db', Join::WITH, 'db.removed = 0')
            ->leftJoin('db.beneficiary', 'b')
            ->leftJoin('b.household', 'hh')
            ->select('COUNT(DISTINCT hh)');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getNoBenificiaryByAgeAndByGender(int $distributionId, int $gender, int $minAge, int $maxAge, DateTime $distributionDate, int $distributionType) {
        $maxDateOfBirth = clone $distributionDate;
        $minDateOfBirth = clone $distributionDate;
        $maxDateOfBirth->sub(new \DateInterval('P'.$minAge.'Y'));
        $minDateOfBirth->sub(new \DateInterval('P'.$maxAge.'Y'));
        $qb = $this->createQueryBuilder('dd');
        $qb
            ->andWhere('dd.id = :distributionId')
                ->setParameter('distributionId', $distributionId)
            ->leftJoin('dd.distributionBeneficiaries', 'db', Join::WITH, 'db.removed = 0');
 
        if ($distributionType === Assistance::TYPE_BENEFICIARY) {
            $qb->leftJoin('db.beneficiary', 'b', Join::WITH, 'b.dateOfBirth >= :minDateOfBirth AND b.dateOfBirth < :maxDateOfBirth AND b.gender = :gender');
        } else {
            $qb->leftJoin('db.beneficiary', 'hhh')
                ->leftJoin('hhh.household', 'hh')
                ->leftJoin('hh.beneficiaries', 'b', Join::WITH, 'b.dateOfBirth >= :minDateOfBirth AND b.dateOfBirth < :maxDateOfBirth AND b.gender = :gender');
        }
                $qb->setParameter('minDateOfBirth', $minDateOfBirth)
                ->setParameter('maxDateOfBirth', $maxDateOfBirth)
                ->setParameter('gender', $gender)
            ->select('COUNT(DISTINCT b)');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getNoServed(int $distributionId, string $modalityType) {
        $qb = $this->createQueryBuilder('dd');
        $qb
            ->andWhere('dd.id = :distributionId')
                ->setParameter('distributionId', $distributionId)
                ->leftJoin('dd.distributionBeneficiaries', 'db', Join::WITH, 'db.removed = 0')
                ->select('COUNT(DISTINCT db)');

                if ($modalityType === 'Mobile Money') {
                    $qb->innerJoin('db.transactions', 't', Join::WITH, 't.transactionStatus = 1');
                } else if ($modalityType === 'QR Code Voucher') {
                    $qb->innerJoin('db.booklets', 'b', Join::WITH, 'b.status = 1 OR b.status = 2');
                } else {
                    $qb->innerJoin('db.generalReliefs', 'gr', Join::WITH, 'gr.distributedAt IS NOT NULL');
                }
        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Returns list of distributions distributed to given beneficiary
     *
     * @param Beneficiary $beneficiary
     * @return Assistance[]
     */
    public function findDistributedToBeneficiary(Beneficiary $beneficiary)
    {
        $qb = $this->createQueryBuilder('dd')
            ->join('dd.distributionBeneficiaries', 'db', Join::WITH, 'db.beneficiary = :beneficiary')
            ->orderBy('dd.dateDistribution', 'DESC');

        $qb->setParameter('beneficiary', $beneficiary);

        return $qb->getQuery()->getResult();
    }

    /**
     * Returns list of distributions distributed to given household.
     *
     * @param Household $household
     *
     * @return DistributedItem[]
     */
    public function findDistributedToHousehold(Household $household): iterable
    {
        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata(DistributedItem::class, 'di');

        $sql = '
        SELECT '.$rsm->generateSelectClause().' FROM ( 
            SELECT ass.*, db.beneficiary_id FROM assistance ass
            JOIN distribution_beneficiary db ON ass.id=db.assistance_id
            JOIN beneficiary b ON b.id=db.beneficiary_id
            WHERE b.household_id = :household
        ) AS di
        ORDER BY di.date_distribution ASC
        ';

        return $this->getEntityManager()
            ->createNativeQuery($sql, $rsm)
            ->setParameter('household', $household)
            ->getResult();
    }

    public function getAllByProject(Project $project)
    {
        $qb = $this->createQueryBuilder('dd')
            ->where('dd.project = :project')
            ->setParameter('project', $project)
            ->andWhere('dd.archived = 0');

        return $qb->getQuery()->getResult();
    }
}
