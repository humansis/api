<?php

namespace BeneficiaryBundle\Model\Vulnerability;

use BeneficiaryBundle\Exception\WeightingParserException;
use ProjectBundle\DBAL\SectorEnum;

class WeightingParser
{
    public const COUNTRY_COLUMN = 'country';
    public const SECTOR_COLUMN = 'sector';

    private const COUNTRY_LENGTH = 3;

    /**
     * @param string $pathToCsv
     *
     * @return WeightingValueObject
     *
     * @throws WeightingParserException
     */
    public function parse(string $pathToCsv): WeightingValueObject
    {
        $csv = $this->readCsvToArray($pathToCsv);

        $valueObject = new WeightingValueObject();

        foreach ($csv as $row) {
            if ($this->rowEmpty($row)) {
                continue;
            }

            $this->checkCountryFormat($row[self::COUNTRY_COLUMN]);
            $this->checkSectorExists($row[self::SECTOR_COLUMN]);
            $this->checkRow($row);

            if (empty($row[self::COUNTRY_COLUMN]) && empty($row[self::SECTOR_COLUMN])) {
                $valueObject->setDefault($row);
            } elseif (empty($row[self::SECTOR_COLUMN])) {
                $valueObject->setCountryDefault($row);
            } elseif (empty($row[self::COUNTRY_COLUMN])) {
                $valueObject->setSectorDefault($row);
            } else {
                $valueObject->setSpecific($row);
            }
        }

        $valueObject->validate();

        return $valueObject;
    }

    /**
     * @param string $pathToCsv
     *
     * @return array
     *
     * @throws WeightingParserException
     */
    private function readCsvToArray(string $pathToCsv): array
    {
        if (!file_exists($pathToCsv)) {
            throw new WeightingParserException('File not found ('.$pathToCsv.')');
        }

        $fileHandler = fopen($pathToCsv, 'r');
        if (false === $fileHandler) {
            throw new WeightingParserException('Failed to open file ('.realpath($pathToCsv).')');
        }

        $csvHead = (array) fgetcsv($fileHandler);
        $this->checkStructure($csvHead);

        fgetcsv($fileHandler); //ignore second column (user custom text, doesn't contain any usable information)

        $csv = [];
        while (false !== ($row = fgetcsv($fileHandler))) {
            $trimmedRow = array_map(function (string $cell) {
                return trim($cell);
            }, $row);

            $csv[] = array_combine($csvHead, $trimmedRow);
        }

        fclose($fileHandler);

        return $csv;
    }

    /**
     * @param array $firstRow
     *
     * @throws WeightingParserException
     */
    private function checkStructure(array $firstRow): void
    {
        $mandatoryColumns = array_merge([self::COUNTRY_COLUMN, self::SECTOR_COLUMN], CategoryEnum::all());

        $missingColumns = [];

        foreach ($mandatoryColumns as $column) {
            if (!in_array($column, $firstRow)) {
                $missingColumns[] = $column;
            }
        }

        if (!empty($missingColumns)) {
            throw new WeightingParserException('CSV file has wrong structure (missing columns '.implode(', ', $missingColumns).' )');
        }
    }

    /**
     * @param string $country
     *
     * @throws WeightingParserException
     */
    private function checkCountryFormat(string $country): void
    {
        if (empty($country)) {
            return;
        }

        if (self::COUNTRY_LENGTH !== strlen($country) || !ctype_alpha($country)) {
            throw new WeightingParserException('Bad country format ('.$country.')');
        }
    }

    /**
     * @param string $sector
     *
     * @throws WeightingParserException
     */
    private function checkSectorExists(string $sector): void
    {
        if (!in_array($sector, SectorEnum::all()) && !empty($sector)) {
            throw new WeightingParserException('Unknown sector ('.$sector.')');
        }
    }

    private function rowEmpty(array $row): bool
    {
        foreach ($row as $cell) {
            if (!empty($cell)) {
                return false;
            }
        }

        return true;
    }


    /**
     * @param array $row
     *
     * @throws WeightingParserException
     */
    private function checkRow(array $row)
    {
        foreach (CategoryEnum::all() as $category) {
            if (0 === strlen($row[$category])) {
                throw new WeightingParserException('Missing value');
            }

            if (!ctype_digit($row[$category])) {
                throw new WeightingParserException('Bad format value');
            }
        }
    }
}
