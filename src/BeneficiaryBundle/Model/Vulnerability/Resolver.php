<?php

namespace BeneficiaryBundle\Model\Vulnerability;

use BeneficiaryBundle\Entity\Beneficiary;
use BeneficiaryBundle\Entity\Household;
use BeneficiaryBundle\Entity\Person;
use BeneficiaryBundle\Exception\CsvParserException;
use Symfony\Component\DependencyInjection\ContainerInterface;

class Resolver
{
    /** @var ContainerInterface $container */
    private $container;

    private $score = 0;

    /** @var Household */
    private $household;

    private $country;
    private $sector;


    /** @var ScoringValueObject[]|null */
    private $scoring;

    /** @var WeightingValueObject|null */
    private $weighting;


    /**
     * Resolver constructor.
     *
     * @param ContainerInterface $container
     *
     * @throws CsvParserException
     */
    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;

        $this->loadWeighting();
    }


    /**
     * @throws CsvParserException
     */
    private function loadWeighting()
    {
        $weightingFilePath = $this->container->get('kernel')
            ->locateResource($this->container->getParameter('vulnerability_weightingFile'));

        $weightingParser = new WeightingParser();
        $this->weighting = $weightingParser->parse($weightingFilePath);
    }


    /**
     * @param string $country
     *
     * @throws CsvParserException
     */
    private function loadScoring(string $country)
    {
        $scoringFileTemplate = $this->container->getParameter('vulnerability_scoringFileTemplate');
        $scoringFileTemplate = str_replace('<<COUNTRY>>', $country, $scoringFileTemplate);

        $scoringFilePath = $this->container->get('kernel')
            ->locateResource($scoringFileTemplate);

        $scoringParser = new ScoringParser();
        $this->scoring[$country] = $scoringParser->parse($scoringFilePath);
    }


    /**
     * @param Household $household
     * @param string    $country
     * @param string    $sector
     *
     * @return int
     * @throws CsvParserException
     */
    public function compute(Household $household, string $country, string $sector): int
    {
        if (!isset($this->scoring[$country])) {
            $this->loadScoring($country);
        }

        $this->score = 0;
        $this->household = $household;
        $this->sector = $sector;
        $this->country = $country;

        $this->genderOfHouseholdHead();

        return $this->score;
    }


    private function increaseScore(string $category, string $condition): void
    {
        $this->score += $this->scoring[$this->country]->getScore($condition) * $this->weighting->get($this->country, $this->sector, $category);
    }


    private function genderOfHouseholdHead(): void
    {
        //TODO does household has head always?

        $beneficiaries = $this->household->getBeneficiaries();

        $householdHead = null;
        /** @var Beneficiary $beneficiary */
        foreach ($beneficiaries as $beneficiary) {
            if ($beneficiary->getStatus() === true) { //TODO value should be in constant
                $householdHead = $beneficiary;
                break;
            }
        }

        if ($householdHead->getPerson()->getGender() === Person::GENDER_FEMALE) {
            $this->increaseScore(CategoryEnum::HHH_GENDER, ConditionEnum::HHH_GENDER_FEMALE);
        } else {
            $this->increaseScore(CategoryEnum::HHH_GENDER, ConditionEnum::HHH_GENDER_MALE);
        }
    }
}
