<?php

namespace BeneficiaryBundle\Model\Vulnerability;

use BeneficiaryBundle\Entity\Beneficiary;
use BeneficiaryBundle\Entity\Household;
use BeneficiaryBundle\Entity\Person;
use BeneficiaryBundle\Exception\CsvParserException;
use BeneficiaryBundle\Exception\ScoringCsvException;

class Resolver
{
    private const SCORING_FILE_PREFIX = 'scoring_';
    private const WEIGHTING_FILE_NAME = 'weighting_example.csv';

    private $score = 0;

    /** @var Household */
    private $household;

    private $country;
    private $sector;


    /** @var ScoringValueObject|null */
    private $scoring;

    /** @var WeightingValueObject|null */
    private $weighting;

    //TODO should be loadData login in __construct?
    //TODO will be the path to csv files always the same

    /**
     * @param string $country
     *
     * @param string $sector
     *
     * @throws CsvParserException
     * @throws ScoringCsvException
     */
    public function loadData(string $country, string $sector): void
    {
        //TODO use Symfony to get path
        $pathToResources = __DIR__.'/../../Resources/vulnerability/';
        $scoringCsvFileName = self::SCORING_FILE_PREFIX.$country.'.csv';

        $scoringParser = new ScoringParser();
        $this->scoring = $scoringParser->parse($pathToResources.$scoringCsvFileName);

        $weightingParser = new WeightingParser();
        $this->weighting = $weightingParser->parse($pathToResources.self::WEIGHTING_FILE_NAME);

        $this->country = $country;
        $this->sector = $sector;
    }

    public function compute(Household $household): int
    {
        //TODO throw exception when data are not loaded
        $this->score = 0;
        $this->household = $household;

        $this->genderOfHouseholdHead();

        return $this->score;
    }


    private function increaseScore(string $category, string $condition): void
    {
        $this->score += $this->scoring->getScore($condition) * $this->weighting->get($this->country, $this->sector, $category);
    }


    private function genderOfHouseholdHead(): void
    {
        //TODO does household has head always?

        $beneficiaries = $this->household->getBeneficiaries();

        $householdHead = null;
        /** @var Beneficiary $beneficiary */
        foreach ($beneficiaries as $beneficiary) {
            if ($beneficiary->getStatus() === true) { //TODO value should be in constant
                $householdHead = $beneficiary;
                break;
            }
        }

        if ($householdHead->getPerson()->getGender() === Person::GENDER_FEMALE) {
            $this->increaseScore(CategoryEnum::HHH_GENDER, ConditionEnum::HHH_GENDER_FEMALE);
        } else {
            $this->increaseScore(CategoryEnum::HHH_GENDER, ConditionEnum::HHH_GENDER_MALE);
        }
    }
}
