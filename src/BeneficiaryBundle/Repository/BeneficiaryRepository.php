<?php

namespace BeneficiaryBundle\Repository;

use BeneficiaryBundle\Entity\Household;
use DistributionBundle\Entity\Assistance;
use CommonBundle\Entity\Location;
use DistributionBundle\Repository\AbstractCriteriaRepository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\QueryBuilder;
use ProjectBundle\Entity\Project;
use Doctrine\ORM\Query\Expr\Join;
use CommonBundle\Entity\Adm3;
use CommonBundle\Entity\Adm2;
use CommonBundle\Entity\Adm1;

/**
 * BeneficiaryRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BeneficiaryRepository extends AbstractCriteriaRepository
{
    /**
     * Get all beneficiaries in a selected project.
     *
     * @param int $project
     *
     * @param string $target
     * @return mixed
     */
    public function getAllOfProject(int $project, string $target)
    {
        $qb = $this->createQueryBuilder('b');
        if ($target == 'Household') {
            $q = $qb->leftJoin('b.household', 'hh')
                ->where(':project MEMBER OF hh.projects')
                ->andWhere('b.status = 1')
                ->setParameter('project', $project);
        } else {
            $q = $qb->leftJoin('b.household', 'hh')
                ->where(':project MEMBER OF hh.projects')
                ->setParameter('project', $project);
        }

        return $q->getQuery()->getResult();
    }

    public function findByUnarchived(array $byArray)
    {
        $qb = $this->createQueryBuilder('b');
        $q = $qb->leftJoin('b.household', 'hh')
                ->where('hh.archived = 0');
        foreach ($byArray as $key => $value) {
            $q = $q->andWhere('b.' . $key . ' = :value' . $key)
                    ->setParameter('value' . $key, $value);
        }

        return $q->getQuery()->getResult();
    }

    public function findByName(string $givenName, string $parentsName, string $familyName)
    {
        return $this->createQueryBuilder('b')
            ->leftJoin('b.household', 'hh')
            ->join('b.person', 'p')
            ->andWhere('hh.archived = 0')
            ->andWhere('p.localGivenName = :givenName')
            ->andWhere('p.localParentsName = :parentsName')
            ->andWhere('p.localFamilyName = :familyName')
            ->setParameter('givenName', $givenName)
            ->setParameter('parentsName', $parentsName)
            ->setParameter('familyName', $familyName)
            ->getQuery()
            ->getResult();
    }

    public function getAllInCountry(string $iso3) {
        $qb = $this->createQueryBuilder('b');
        $this->beneficiariesInCountry($qb, $iso3);
        $qb->andWhere('hh.archived = 0');

        return $qb->getQuery()->getResult();
    }

    public function countAllInCountry(string $iso3)
    {
        $qb = $this->createQueryBuilder('b');
        $this->beneficiariesInCountry($qb, $iso3);
        $qb->andWhere('hh.archived = 0')
            ->select('COUNT(DISTINCT b)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countAllInProject(Project $project): int
    {
        $qb = $this->createQueryBuilder('b');
        $qb
            ->select('COUNT(DISTINCT b)')
            ->where(':project MEMBER OF b.projects')
            ->setParameter('project', $project)
            ->andWhere('b.archived = 0')
        ;

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getAllofDistribution(Assistance $assistance)
    {
        $qb = $this->createQueryBuilder('b');
        $q = $qb->leftJoin('b.distributionBeneficiary', 'db')
            ->where('db.assistance = :assistance')
            ->setParameter('assistance', $assistance);

        return $q->getQuery()->getResult();
    }

    public function getNotRemovedofDistribution(Assistance $assistance)
    {
        $qb = $this->createQueryBuilder('b');
        $q = $qb->leftJoin('b.distributionBeneficiary', 'db')
            ->where('db.assistance = :assistance')
            ->andWhere('db.removed = 0')
            ->setParameter('assistance', $assistance);

        return $q->getQuery()->getResult();
    }

    /**
     * Get the head of household.
     *
     * @param Household $household
     *
     * @return mixed
     */
    public function getHeadOfHousehold(Household $household)
    {
        $qb = $this->createQueryBuilder('b');
        $q = $qb->where('b.household = :household')
            ->andWhere('b.status = 1')
            ->setParameter('household', $household);

        try {
            return $q->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * Get the head of household.
     *
     * @param $householdId
     *
     * @return mixed
     */
    public function getHeadOfHouseholdId($householdId)
    {
        $qb = $this->createQueryBuilder('b');
        $q = $qb->leftJoin('b.household', 'hh')
            ->andWhere('hh.id = :id')
            ->andWhere('b.status = 1')
            ->setParameter('id', $householdId);

        try {
            return $q->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * @param $onlyCount
     * @param $countryISO3
     * @param Project $project
     *
     * @return QueryBuilder|void
     */
    public function configurationQueryBuilder($onlyCount, $countryISO3, Project $project = null)
    {
        $qb = $this->createQueryBuilder('b');

        if ($onlyCount) {
            $qb->select('count(b)');
        }
        if (null !== $project) {
            $qb->where(':idProject MEMBER OF hh.projects')
                ->setParameter('idProject', $project->getId());
        }
        $qb->leftJoin('b.household', 'hh');
        $this->setCountry($qb, $countryISO3);

        return $qb;
    }

    /**
     * Create sub request. The main request while found household inside the subrequest (and others subrequest)
     * The household must have at least one beneficiary with the condition respected ($field $operator $value / Example: gender = 0).
     *
     * @param QueryBuilder $qb
     * @param $i
     * @param $countryISO3
     * @param array $filters
     */
    public function whereDefault(QueryBuilder &$qb, $i, $countryISO3, array $filters)
    {
        $qb->andWhere("b.{$filters['field_string']} {$filters['condition_string']} :val$i")
            ->setParameter("val$i", $filters['value_string']);
    }

    /**
     * Create sub request. The main request while found household inside the subrequest (and others subrequest)
     * The household must respect the value of the country specific ($idCountrySpecific), depends on operator and value.
     *
     * @param QueryBuilder $qb
     * @param $i
     * @param $countryISO3
     * @param array $filters
     */
    protected function whereVulnerabilityCriterion(QueryBuilder &$qb, $i, $countryISO3, array $filters)
    {
        $qb->leftJoin('b.vulnerabilityCriteria', "vc$i")
            ->andWhere("vc$i.id = :idvc$i")
            ->setParameter("idvc$i", $filters['id_field']);
    }

    /**
     * Create sub request. The main request while found household inside the subrequest (and others subrequest)
     * The household must respect the value of the country specific ($idCountrySpecific), depends on operator and value.
     *
     * @param QueryBuilder $qb
     * @param $i
     * @param $countryISO3
     * @param array $filters
     */
    protected function whereCountrySpecific(QueryBuilder &$qb, $i, $countryISO3, array $filters)
    {
        $qb->leftJoin('hh.countrySpecificAnswers', "csa$i")
            ->andWhere("csa$i.countrySpecific = :countrySpecific$i")
            ->setParameter("countrySpecific$i", $filters['id_field'])
            ->andWhere("csa$i.answer {$filters['condition_string']} :value$i")
            ->setParameter("value$i", $filters['value_string']);
    }

    public function countServedInCountry($iso3) {
        $qb = $this->createQueryBuilder('b');
        $this->beneficiariesInCountry($qb, $iso3);

        $qb->select('COUNT(DISTINCT b)')
            ->leftJoin('b.distributionBeneficiary', 'db')
            ->leftJoin('db.booklets', 'bk')
            ->leftJoin('db.transactions', 't')
            ->leftJoin('db.generalReliefs', 'gri')
            ->andWhere('t.transactionStatus = 1 OR gri.distributedAt IS NOT NULL OR bk.id IS NOT NULL');

        return $qb->getQuery()->getSingleScalarResult();
    }

    private function beneficiariesInCountry(QueryBuilder &$qb, $countryISO3) {
        $qb->leftJoin('b.household', 'hh');

        $householdRepository = $this->getEntityManager()->getRepository(Household::class);
        $householdRepository->whereHouseholdInCountry($qb, $countryISO3);
    }


    public function getDistributionBeneficiaries(array $criteria, Project $project, string $country, int $threshold, string $distributionTarget)
    {
        $hhRepository = $this->getEntityManager()->getRepository(Household::class);
        $qb = $hhRepository->getUnarchivedByProject($project);

        // First we get all the beneficiaries, and we store the headId for later
        $qb->leftJoin('hh.beneficiaries', 'b')
            ->select('DISTINCT b.id AS id')
            ->leftJoin('hh.beneficiaries', 'head')
            ->andWhere('head.status = 1')
            ->addSelect('head.id AS headId');

        // If a beneficiary has a criterion, they are selectable, therefore every criterion has to go in a orX()
        $orStatement = $qb->expr()->orX();
        foreach ($criteria as $index => $criterion) {
            $condition = $criterion['condition_string'];
            $field = $criterion['field_string'];
            $condition = $condition === '!=' ? '<>' : $condition;

            if ($criterion['target'] == "Household") {
                $this->getHouseholdWithCriterion($qb, $field, $condition, $criterion, $index, $orStatement);
            } elseif ($criterion['target'] == "Beneficiary") {
                $this->getBeneficiaryWithCriterion($qb, $field, $condition, $criterion, $index, $orStatement);
            } elseif ($criterion['target'] == "Head") {
                $this->getHeadWithCriterion($qb, $field, $condition, $criterion, $index, $orStatement);
            }
            if (array_key_exists('value_string', $criterion) && !is_null($criterion['value_string'])) {
                $qb->setParameter('parameter' . $index, $criterion['value_string']);
            }
        }
        $qb->andWhere($orStatement);

        return $qb->getQuery()->getResult();
    }


    private function getHouseholdWithCriterion(&$qb, $field, $condition, $criterion, int $i, &$orStatement)
    {
        // The selection criteria is a country Specific
        if ($criterion['table_string'] === 'countrySpecific') {
            $qb->leftJoin('hh.countrySpecificAnswers', 'csa'. $i, Join::WITH, 'csa'.$i . '.answer ' . $condition . ' :parameter'.$i)
            ->leftJoin('csa'.$i . '.countrySpecific', 'cs'.$i, Join::WITH, 'cs'.$i . '.fieldString = :csName'.$i)
            ->setParameter('csName'.$i, $field);

            // To validate the criterion, the household has to answer the countrySpecific AND have the good value for it
            $andStatement = $qb->expr()->andX();
            $andStatement->add('cs'.$i . '.fieldString = :csName'.$i);
            $andStatement->add('csa'.$i . '.answer ' . $condition . ' :parameter'.$i);
            $orStatement->add($andStatement);
            $qb->addSelect('cs'.$i . '.fieldString');
        }

        // The selection criteria is directly a field in the Household table
        else if ($criterion['type'] === 'table_field') {
            $orStatement->add('hh.' . $field . $condition . ' :parameter'.$i);
            $qb->addSelect('(CASE WHEN hh.' . $field . $condition . ' :parameter'.$i . ' THEN hh. ' . $field . ' ELSE :null END) AS ' . $field.$i)
                ->setParameter('null', null);
        }
        else if ($criterion['type'] === 'other') {
            // The selection criteria is the size of the household
            if ($field === 'householdSize') {
                $orStatement->add('SIZE(hh.beneficiaries) ' . $condition . ' :parameter'.$i);
                $qb->addSelect('(CASE WHEN SIZE(hh.beneficiaries) ' . $condition . ' :parameter'.$i .' THEN SIZE(hh.beneficiaries) ELSE :null END) AS ' . $field.$i)
                    ->setParameter('null', null);
            }
            // The selection criteria is the location type (residence, camp...)
            else if ($field === 'locationType') {
                $qb->leftJoin('hh.householdLocations', 'hl'.$i, Join::WITH, 'hl'.$i . '.type ' . $condition . ' :parameter'.$i);
                $orStatement->add('hl'.$i . '.type ' . $condition . ' :parameter'.$i);
                $qb->addSelect('hl'.$i . '.type AS ' . $field.$i);
            }
            // The selection criteria is the name of the camp in which the household lives
            else if ($field === 'campName') {
                $qb->leftJoin('hh.householdLocations', 'hl'.$i, Join::WITH, 'hl'.$i . '.type = :camp')
                    ->leftJoin('hl' . $i . '.campAddress', 'ca'.$i)
                    ->leftJoin('ca'.$i.'.camp', 'c'.$i, Join::WITH, 'c'.$i . '.id = :parameter'.$i)
                    ->setParameter('camp', 'camp');
                $orStatement->add('c'.$i . '.id = :parameter'.$i);
                $qb->addSelect('c'.$i . '.id AS ' . $field.$i);
            } else if ($field === 'currentAdm1' || $field === 'currentAdm2' || $field === 'currentAdm3' || $field === 'currentAdm4') {
                $qb->leftJoin('hh.householdLocations', 'hl'.$i)
                    ->leftJoin('hl'.$i.'.campAddress', 'ca'.$i)
                    ->leftJoin('ca'.$i.'.camp', 'c'.$i)
                    ->leftJoin('hl'.$i.'.address', 'ad'.$i)
                    ->leftJoin(Location::class, 'l'.$i, Join::WITH,
                        "l".$i.".id = COALESCE(IDENTITY(c".$i.".location, 'id'), IDENTITY(ad".$i.".location, 'id'))");
                $andStatement = $qb->expr()->andX();
                $andStatement->add('hl'.$i.'.locationGroup = :current');
                $qb->setParameter('current', 'current');

                if ($field === 'currentAdm1') {
                    $qb->leftJoin('l'.$i.'.adm4', 'adm4'.$i)
                        ->leftJoin('l'.$i.'.adm3', 'locAdm3'.$i)
                        ->leftJoin('l'.$i.'.adm2', 'locAdm2'.$i)
                        ->leftJoin('l'.$i.'.adm1', 'locAdm1'.$i)
                        ->leftJoin(Adm3::class, 'adm3'.$i, Join::WITH, "adm3".$i.".id = COALESCE(IDENTITY(adm4".$i.".adm3, 'id'), locAdm3".$i.".id)")
                        ->leftJoin(Adm2::class, 'adm2'.$i, Join::WITH, "adm2".$i.".id = COALESCE(IDENTITY(adm3".$i.".adm2, 'id'), locAdm2".$i.".id)")
                        ->leftJoin(Adm1::class, 'adm1'.$i, Join::WITH,
                            "adm1".$i.".id = COALESCE(IDENTITY(adm2".$i.".adm1, 'id'), locAdm1".$i.".id) AND adm1".$i.".id " . $condition . " :parameter".$i);
                    $andStatement->add('adm1'.$i.'.id ' . $condition . ' :parameter'.$i);
                    $qb->addSelect('adm1'.$i.'.id AS ' . $field.$i);
                } else if ($field === 'currentAdm2') {
                    $qb->leftJoin('l'.$i.'.adm4', 'adm4'.$i)
                        ->leftJoin('l'.$i.'.adm3', 'locAdm3'.$i)
                        ->leftJoin('l'.$i.'.adm2', 'locAdm2'.$i)
                        ->leftJoin(Adm3::class, 'adm3'.$i, Join::WITH, "adm3".$i.".id = COALESCE(IDENTITY(adm4".$i.".adm3, 'id'), locAdm3".$i.".id)")
                        ->leftJoin(Adm2::class, 'adm2'.$i, Join::WITH,
                            "adm2".$i.".id = COALESCE(IDENTITY(adm3".$i.".adm2, 'id'), locAdm2".$i.".id) AND adm2".$i.".id " . $condition . " :parameter".$i);
                    $andStatement->add('adm2'.$i.'.id ' . $condition . ' :parameter'.$i);
                    $qb->addSelect('adm2'.$i.'.id AS ' . $field.$i);
                } else if ($field === 'currentAdm3') {
                    $qb->leftJoin('l'.$i.'.adm4', 'adm4'.$i)
                        ->leftJoin('l'.$i.'.adm3', 'locAdm3'.$i)
                        ->leftJoin(Adm3::class, 'adm3'.$i, Join::WITH,
                            "adm3".$i.".id = COALESCE(IDENTITY(adm4".$i.".adm3, 'id'), locAdm3".$i.".id) AND adm3".$i.".id " . $condition . " :parameter".$i);
                    $andStatement->add('adm3'.$i.'.id ' . $condition . ' :parameter'.$i);
                    $qb->addSelect('adm3'.$i.'.id AS ' . $field.$i);
                }  else if ($field === 'currentAdm4') {
                    $qb->leftJoin('l'.$i.'.adm4', 'adm4'.$i, Join::WITH, 'adm4'.$i.'.id ' . $condition . ' :parameter'.$i);
                    $andStatement->add('adm4'.$i.'.id ' . $condition . ' :parameter'.$i);
                    $qb->addSelect('adm4'.$i.'.id AS ' . $field.$i);
                }
                $orStatement->add($andStatement);
            }
        }
    }

    private function getBeneficiaryWithCriterion(&$qb, $field, $condition, $criterion, int $i, &$orStatement)
    {
        // The selection criteria is a vulnerability criterion
        if ($criterion['table_string'] === 'vulnerabilityCriteria') {
            $this->hasVulnerabilityCriterion($qb, 'b', $condition, $field, $orStatement, $i);
        }
        // The selection criteria is directly a field in the Beneficiary table
        else if ($criterion['type'] === 'table_field') {
            $orStatement->add('b.' . $field . $condition . ' :parameter'.$i);
            $qb->addSelect('(CASE WHEN b.' . $field . $condition . ' :parameter'.$i . ' THEN b.' . $field . ' ELSE :null END) AS ' . $field.$i)
                ->setParameter('null', null);
        }
        else if ($criterion['type'] === 'other') {
            // The selection criteria is the last distribution
            if ($field === 'hasNotBeenInDistributionsSince') {
                $qb->leftJoin('b.distributionBeneficiary', 'db'.$i)
                    ->leftJoin('db'.$i . '.assistance', 'd'.$i)
                    // If has criteria, add it to the select to calculate weight later
                    ->addSelect('(CASE WHEN d'.$i . '.dateDistribution < :parameter'.$i . ' THEN d'.$i . '.dateDistribution WHEN SIZE(b.distributionBeneficiary) = 0 THEN :noDistribution ELSE :null END)'. ' AS ' . $criterion['field_string'].$i)
                    ->setParameter('noDistribution', 'noDistribution')
                    ->setParameter('null', null);
                // The beneficiary answers the criteria if they didn't have a distribution after this date or if they never had a distribution at all
                $orStatement->add($qb->expr()->eq('SIZE(b.distributionBeneficiary)', '0'));
                $orStatement->add($qb->expr()->lte('d'.$i . '.dateDistribution', ':parameter'.$i));
            }
        }
    }

    private function getHeadWithCriterion(&$qb, $field, $condition, $criterion, int $i, &$orStatement)
    {
        $qb->leftJoin('hh.beneficiaries', 'hhh'.$i)
            ->andWhere('hhh'.$i . '.status = 1');
        // The selection criteria is directly a field in the Beneficiary table
        if ($criterion['type'] === 'table_field') {
            // The criterion name identifies the criterion (eg. headOfHouseholdDateOfBirth) whereas the field is gonna identify the table field (eg. dateOfBirth) in the Beneficiary table
            $criterionName = $field;
            if ($field === 'headOfHouseholdDateOfBirth') {
                $field = 'dateOfBirth';
            } else if ($field === 'headOfHouseholdGender') {
                $field = 'gender';
            }
            $orStatement->add('hhh'.$i . '.' . $field . $condition . ' :parameter'.$i);
            $qb->addSelect('(CASE WHEN hhh'.$i . '.' . $field . $condition . ' :parameter'.$i . ' THEN hhh'.$i . '.' . $field . ' ELSE :null END) AS ' . $criterionName.$i)
                ->setParameter('null', null);
        }
        else if ($criterion['type'] === 'other') {
            if ($field === 'disabledHeadOfHousehold') {
                $this->hasVulnerabilityCriterion($qb, 'hhh'.$i, $condition, 'disabled', $orStatement, $i);
            }
        }
    }

    private function hasVulnerabilityCriterion(&$qb, $on, $conditionString, $vulnerabilityName, &$orStatement, int $i) {
        // Find a way to act directly on the join table beneficiary_vulnerability
        if ($conditionString == "true") {
            $qb->leftJoin($on . '.vulnerabilityCriteria', 'vc'.$i, Join::WITH, 'vc'.$i . '.fieldString = :vulnerability'.$i);
            $orStatement->add($qb->expr()->eq('vc'.$i . '.fieldString', ':vulnerability'.$i));
            // If has criteria, add it to the select to calculate weight later
            $qb->addSelect('vc'.$i . '.fieldString AS ' . $on . $vulnerabilityName.$i);
        } else {
            $qb->leftJoin($on . '.vulnerabilityCriteria', 'vc'.$i, Join::WITH, 'vc'.$i . '.fieldString <> :vulnerability'.$i);
            $orStatement->add($qb->expr()->eq('SIZE(' . $on . '.vulnerabilityCriteria)', 0))
            ->add($qb->expr()->neq( 'vc'.$i . '.fieldString', ':vulnerability'.$i));
            // The beneficiary doesn't have a vulnerability A if all their vulnerabilities are != A or if they have no vulnerabilities
            // If has criteria, add it to the select to calculate weight later
            $qb->addSelect('(CASE WHEN vc'.$i . '.fieldString <> :vulnerability'.$i . ' THEN vc'.$i . '.fieldString WHEN SIZE(' . $on . '.vulnerabilityCriteria) = 0 THEN :noCriteria ELSE :null END) AS ' . $on . $vulnerabilityName.$i)
            ->setParameter('noCriteria', 'noCriteria')
            ->setParameter('null', null);
        }
        $qb->setParameter(':vulnerability'.$i, $vulnerabilityName);
    }

}
