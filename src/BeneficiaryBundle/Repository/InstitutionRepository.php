<?php

declare(strict_types=1);

namespace BeneficiaryBundle\Repository;

use CommonBundle\Entity\Location;
use CommonBundle\InputType\Country;
use CommonBundle\InputType\DataTableFilterType;
use CommonBundle\InputType\DataTableSorterType;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use NewApiBundle\InputType\InstitutionFilterInputType;
use NewApiBundle\InputType\InstitutionOrderInputType;
use NewApiBundle\Request\Pagination;
use ProjectBundle\Entity\Project;

/**
 * InstitutionRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InstitutionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get all Institution by country.
     *
     * @param Country                  $country
     * @param                          $begin
     * @param                          $pageSize
     * @param DataTableSorterType|null $sort
     * @param DataTableFilterType[]    $filters
     *
     * @return mixed
     */
    public function getAllBy(Country $country, $begin, $pageSize, DataTableSorterType $sort = null, array $filters = [])
    {
        // Recover global information for the page
        $qb = $this->createQueryBuilder('inst');

        // We join information that is needed for the filters
        $q = $qb->andWhere('inst.archived = 0');

        $this->whereInstitutionInCountry($q, $country->getIso3());

        $filterIndex = 0;
        foreach ($filters as $filter) {
            if (is_array($filter['filter'])) {
                $values = $filter['filter'];
            } else {
                $values = [$filter['filter']];
            }
            switch ($filter['category']) {
                case 'projectName':
                    $projectAlias = "project$filterIndex";
                    $q->join('inst.projects', $projectAlias);
                    foreach ($values as $value) {
                        $q->orWhere("$projectAlias.name LIKE :projectName$filterIndex");
                        $q->setParameter('projectName'.$filterIndex, $value);
                        ++$filterIndex;
                    }
                    break;
                case 'name':
                    foreach ($values as $value) {
                        $q->andWhere('inst.name LIKE :name'.$filterIndex);
                        $q->setParameter('name'.$filterIndex, $value);
                        ++$filterIndex;
                    }
                    break;
            }
            ++$filterIndex;
        }

        if (is_null($begin)) {
            $begin = 0;
        }
        if (is_null($pageSize)) {
            $pageSize = 0;
        }

        if ($pageSize > -1) {
            $q->setFirstResult($begin)
                ->setMaxResults($pageSize);
        }

        $paginator = new Paginator($q, true);

        $query = $q->getQuery();

        return [count($paginator), $query->getResult()];
    }

    protected function getInstitutionLocation(QueryBuilder &$qb)
    {
        $qb->leftJoin('inst.address', 'addr');
        $qb->leftJoin('addr.location', 'l');
    }

    public function whereInstitutionInCountry(QueryBuilder &$qb, $countryISO3)
    {
        $this->getInstitutionLocation($qb);
        $locationRepository = $this->getEntityManager()->getRepository(Location::class);
        $locationRepository->whereCountry($qb, $countryISO3);
    }

    public function getUnarchivedByProject(Project $project)
    {
        $qb = $this->createQueryBuilder("comm");
        $q = $qb->leftJoin("comm.projects", "p")
            ->where("p = :project")
            ->setParameter("project", $project)
            ->andWhere("comm.archived = 0");

        return $q->getQuery()->getResult();
    }

    public function findByParams(?string $iso3, ?InstitutionFilterInputType $filter = null, ?InstitutionOrderInputType $orderBy = null, ?Pagination $pagination = null)
    {
        $qb = $this->createQueryBuilder('i')
            ->andWhere('i.archived = 0');

        if ($iso3) {
            $qb->leftJoin('i.address', 'a')
                ->leftJoin('a.location', 'l');

            $locationRepository = $this->getEntityManager()->getRepository(Location::class);
            $locationRepository->whereCountry($qb, $iso3);
        }

        if ($filter && $filter->hasFulltext()) {
            $exactText = (string) $filter->getFulltext();
            $likeCaseInsensitive = '%'.strtoupper($exactText).'%';
            $likeCaseSensitive = '%'.$exactText.'%';

            $fulltextQuery = $qb->expr()->orX();
            $fulltextQuery->add($qb->expr()->like($qb->expr()->upper('i.name'), $qb->expr()->literal($likeCaseInsensitive)));
            $fulltextQuery->add($qb->expr()->eq('i.id', $qb->expr()->literal($exactText)));
            $qb->andWhere($fulltextQuery);
        }

        if ($pagination) {
            $qb->setMaxResults($pagination->getLimit());
            $qb->setFirstResult($pagination->getOffset());
        }

        if ($orderBy) {
            foreach ($orderBy->toArray() as $name => $direction) {
                switch ($name) {
                    case InstitutionOrderInputType::SORT_BY_ID:
                        $qb->orderBy('i.id', $direction);
                        break;
                    case InstitutionOrderInputType::SORT_BY_NAME:
                        $qb->orderBy('i.name', $direction);
                        break;
                    case InstitutionOrderInputType::SORT_BY_LONGITUDE:
                        $qb->orderBy('i.longitude', $direction);
                        break;
                    case InstitutionOrderInputType::SORT_BY_LATITUDE:
                        $qb->orderBy('i.latitude', $direction);
                        break;
                    case InstitutionOrderInputType::SORT_BY_CONTACT_GIVEN_NAME:
                        if (!in_array('c', $qb->getAllAliases())) {
                            $qb->leftJoin('i.contact', 'c');
                        }
                        $qb->orderBy('c.enGivenName', $direction);
                        break;
                    case InstitutionOrderInputType::SORT_BY_CONTACT_FAMILY_NAME:
                        if (!in_array('c', $qb->getAllAliases())) {
                            $qb->leftJoin('i.contact', 'c');
                        }
                        $qb->orderBy('c.enFamilyName', $direction);
                        break;
                    case InstitutionOrderInputType::SORT_BY_TYPE:
                        $qb->orderBy('i.type', $direction);
                        break;
                    default:
                        throw new \InvalidArgumentException('Invalid order by directive '.$name);
                }
            }
        }

        return new Paginator($qb);
    }
}
