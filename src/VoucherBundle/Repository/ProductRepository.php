<?php

namespace VoucherBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use NewApiBundle\InputType\ProductFilterInputType;
use NewApiBundle\InputType\ProductOrderInputType;
use NewApiBundle\Request\Pagination;
use VoucherBundle\Entity\Product;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function getNameByBooklet(int $bookletId)
    {
        $qb = $this->_em->createQueryBuilder()
            ->select('DISTINCT p.name')
            ->from(\VoucherBundle\Entity\Booklet::class, 'b')
            ->join('b.vouchers', 'v')
            ->join('v.voucherPurchase', 'vp')
            ->join('vp.records', 'vpr')
            ->join('vpr.product', 'p')
            ->where('b.id = :id')
            ->setParameter('id', $bookletId);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param string                      $countryIso3
     * @param ProductFilterInputType|null $filter
     * @param ProductOrderInputType|null  $orderBy
     * @param Pagination|null             $pagination
     *
     * @return Paginator|Product[]
     */
    public function findByCountry(
        string $countryIso3,
        ?ProductFilterInputType $filter = null,
        ?ProductOrderInputType $orderBy = null,
        ?Pagination $pagination = null
    ): Paginator
    {
        $qb = $this->createQueryBuilder('p')
            ->andWhere('p.archived = 0')
            ->andWhere('p.countryISO3 = :countryIso3')
            ->setParameter('countryIso3', $countryIso3);

        if ($filter) {
            if ($filter->hasFulltext()) {
                $qb->andWhere('(p.id LIKE :fulltext OR p.name LIKE :fulltext OR p.unit LIKE :fulltext)')
                    ->setParameter('fulltext', '%'.$filter->getFulltext().'%');
            }
        }

        if ($pagination) {
            $qb->setMaxResults($pagination->getLimit());
            $qb->setFirstResult($pagination->getOffset());
        }

        if ($orderBy) {
            foreach ($orderBy->toArray() as $name => $direction) {
                switch ($name) {
                    case ProductOrderInputType::SORT_BY_ID:
                        $qb->orderBy('p.id', $direction);
                        break;
                    case ProductOrderInputType::SORT_BY_NAME:
                        $qb->orderBy('p.name', $direction);
                        break;
                    case ProductOrderInputType::SORT_BY_UNIT:
                        $qb->orderBy('p.unit', $direction);
                        break;
                    default:
                        throw new \InvalidArgumentException('Invalid order directive '.$name);
                }
            }
        }

        return new Paginator($qb);
    }
}
